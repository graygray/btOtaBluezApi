/*
 * OTADefine.h
 *
 *  Created on: 2013/2/6
 *      Author: Gray.Lin
 */


#ifndef OTADefine_H_
#define OTADefine_H_
// program ver
#define OTA_VERSION 		"v1.5.1"

extern int ota_update(char*, char*);

// OTA commands
#define START_CMD 			0x01
#define DATA_CMD 			0x02
#define FINISH_CMD 			0x03
#define START_CMD_RESPONSE 	0x04
#define DATA_CMD_RESPONSE 	0x05
#define FINISH_CMD_RESPONSE 0x06

// OTA wait time, if no response then retry, 15s
#define OTA_WAIT_TIME 750

// OTA report ID
#define SystemFirmware 	0xF0
#define BTFirmware 		0xE0

// OTA CRC type
enum OTA_CRCTP{

	CRC16CCITT = 0,
	CRC16IBM,
	CRC16T10DIF,
	CRC32IEEE,
	CRC16DNP,

};

// OTA response status
enum OTA_RSP_STATUS {

	SUCCESS = 0,
	CRC_ERR,
	NO_NEED_UPDATE,		// The firmware version is not newer than the current one.
	SEQ_ERR,			// Sequence number error.
	FW_CRC_ERROR, 		// CRC of the whole firmware error.
	BAT_LOW,			// Battery Level is below threshold for OTA.

};

// OTA stages
enum OTA_STAGES {

	STAGE_START = 0,
	STAGE_DATA,
	STAGE_DATA_NEXT,
	STAGE_FINISH,
	STAGE_ERR_RETRY,
	STAGE_COMPLETE,
	STAGE_RETRYING,
	STAGE_NEXT_CMD,
	STAGE_NEW_CMD,

};

// length of command
#define start_cmd_len 24
#define data_cmd_len 649	//assume fix length
#define finish_cmd_len 11
#define rsp_cmd_len 6

// index of command field
//common field
#define f_RID 		0	// Report ID
#define f_SIZE0 	1	// size of packet
#define f_SIZE1 	2
#define f_DATATP 	3	// 1 byte OTA Data Type
#define f_CMD 		5	// OTA Command
//common field
// start
#define f_s_VER0 	5	// file version number
#define f_s_VER1 	6
#define f_s_VER2 	7
#define f_s_VER3 	8
#define f_s_FS0 	9	// size of system firmware.
#define f_s_FS1 	10
#define f_s_FS2 	11
#define f_s_FS3 	12
#define f_s_RSA0 	13	// RAM start address.
#define f_s_RSA1 	14
#define f_s_RSA2 	15
#define f_s_RSA3 	16
#define f_s_EAP0 	17	// entry point address.
#define f_s_EAP1 	18
#define f_s_EAP2 	19
#define f_s_EAP3 	20
#define f_s_CRCTP	21	// CRCTP ¡V 1 bytes of file CRC type
#define f_s_CRC0 	22	// CRC 16 bits CRC calculated on the whole packet except the last 2 bytes of CRC
#define f_s_CRC1 	23
// start
// data
#define f_d_SEQ0 	5	// SEQ 16 bit Packet Sequence number
#define f_d_SEQ1 	6
#define f_d_DATA0 	7	// 640 bytes of firmware data
#define f_d_CRC0 	647	//
#define f_d_CRC1 	648	//
// data
// finish
#define f_f_CRCF0 	5	//  32 bits of CRC of the entire firmware
#define f_f_CRCF1 	6
#define f_f_CRCF2 	7
#define f_f_CRCF3 	8
#define f_f_CRC0 	9
#define f_f_CRC1 	10
// finish
// response
#define f_r_f_DATATP 	1
#define f_r_CMD 		2
#define f_r_SEQ0 		3
#define f_r_SEQ1 		4
#define f_r_STAT 		5
// response

/* CRC16 implementation acording to CCITT standards */
static const unsigned short crc16tab[256]= {
	0x0000,0x1021,0x2042,0x3063,0x4084,0x50a5,0x60c6,0x70e7,
	0x8108,0x9129,0xa14a,0xb16b,0xc18c,0xd1ad,0xe1ce,0xf1ef,
	0x1231,0x0210,0x3273,0x2252,0x52b5,0x4294,0x72f7,0x62d6,
	0x9339,0x8318,0xb37b,0xa35a,0xd3bd,0xc39c,0xf3ff,0xe3de,
	0x2462,0x3443,0x0420,0x1401,0x64e6,0x74c7,0x44a4,0x5485,
	0xa56a,0xb54b,0x8528,0x9509,0xe5ee,0xf5cf,0xc5ac,0xd58d,
	0x3653,0x2672,0x1611,0x0630,0x76d7,0x66f6,0x5695,0x46b4,
	0xb75b,0xa77a,0x9719,0x8738,0xf7df,0xe7fe,0xd79d,0xc7bc,
	0x48c4,0x58e5,0x6886,0x78a7,0x0840,0x1861,0x2802,0x3823,
	0xc9cc,0xd9ed,0xe98e,0xf9af,0x8948,0x9969,0xa90a,0xb92b,
	0x5af5,0x4ad4,0x7ab7,0x6a96,0x1a71,0x0a50,0x3a33,0x2a12,
	0xdbfd,0xcbdc,0xfbbf,0xeb9e,0x9b79,0x8b58,0xbb3b,0xab1a,
	0x6ca6,0x7c87,0x4ce4,0x5cc5,0x2c22,0x3c03,0x0c60,0x1c41,
	0xedae,0xfd8f,0xcdec,0xddcd,0xad2a,0xbd0b,0x8d68,0x9d49,
	0x7e97,0x6eb6,0x5ed5,0x4ef4,0x3e13,0x2e32,0x1e51,0x0e70,
	0xff9f,0xefbe,0xdfdd,0xcffc,0xbf1b,0xaf3a,0x9f59,0x8f78,
	0x9188,0x81a9,0xb1ca,0xa1eb,0xd10c,0xc12d,0xf14e,0xe16f,
	0x1080,0x00a1,0x30c2,0x20e3,0x5004,0x4025,0x7046,0x6067,
	0x83b9,0x9398,0xa3fb,0xb3da,0xc33d,0xd31c,0xe37f,0xf35e,
	0x02b1,0x1290,0x22f3,0x32d2,0x4235,0x5214,0x6277,0x7256,
	0xb5ea,0xa5cb,0x95a8,0x8589,0xf56e,0xe54f,0xd52c,0xc50d,
	0x34e2,0x24c3,0x14a0,0x0481,0x7466,0x6447,0x5424,0x4405,
	0xa7db,0xb7fa,0x8799,0x97b8,0xe75f,0xf77e,0xc71d,0xd73c,
	0x26d3,0x36f2,0x0691,0x16b0,0x6657,0x7676,0x4615,0x5634,
	0xd94c,0xc96d,0xf90e,0xe92f,0x99c8,0x89e9,0xb98a,0xa9ab,
	0x5844,0x4865,0x7806,0x6827,0x18c0,0x08e1,0x3882,0x28a3,
	0xcb7d,0xdb5c,0xeb3f,0xfb1e,0x8bf9,0x9bd8,0xabbb,0xbb9a,
	0x4a75,0x5a54,0x6a37,0x7a16,0x0af1,0x1ad0,0x2ab3,0x3a92,
	0xfd2e,0xed0f,0xdd6c,0xcd4d,0xbdaa,0xad8b,0x9de8,0x8dc9,
	0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1,
	0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,
	0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};

#endif /* OTADefine_H_ */
